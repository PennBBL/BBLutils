#test_mode=echo

#useage
function Usage {
	cat <<USAGE
Usage:
  -a:  Audit file, generated by an xnat_audit.py. Required.
  -s:  Scan types, in order of xnat audit header. Required.
  -p:  Protocol name as on monstrum. Required.
  -i:  Scanid. Optional, to run with one participant only.
  -e:  Email address for error reporting.
  -r:  Redcap protocol name for automatic uploading.
  -t:  Testing mode.

USAGE
	exit 1
}

###set defaults
overwrite=0
singlesub=0

###check for args
[ $# -lt 1 ] && Usage

# reading command line arguments
while getopts ":a:p:he:r:s:i:t" OPT
	do
	case $OPT in
		h) #help
		Usage >&2
		exit 0
		;;
		a) #audit file
		audit_file=$OPTARG
		;;
		p) #protocol name as on monstrum
		protocol=$OPTARG
		;;
		e) #email address for error reporting
		email=$OPTARG
		;;
		r) #name of redcap project for automated uploading
		redcap_name=$OPTARG
		;;
		s) #list of scantypes in order of xnat header
		scan_types=$OPTARG
		;;
		i) #scanid for single subject mode
		single_id=$OPTARG
		single_id=`echo $single_id | sed s/^0*//`
		single_id=`printf %06d $single_id`
		singlesub=1
		;;
		t) #testing mode
		testing=1
		;;
		\?) # getopts issues an error message
		Usage >&2
		exit 1
		;;
	esac
done

##check for required variables!!!

#set variables automatically for testing purposes
if [ ! -z $testing ];then
	#audit_file=/import/monstrum/eons2_xnat/scripts/xnat_stats/n404_xnat_audit.csv
	audit_file=/import/monstrum/eons_xnat/redcap/imaging_variables/n1601_eons_xnat_audit_7_1_14.csv
	sequence_name=perf
	#protocol=eons2_xnat
	protocol=eons_xnat
	file_path="*_ep2d_se_pcasl_PHC_1200ms/quant_[dn][io][c_][od][_i][bc][eo]*/reg_std_ants/cbf_map_*_2mm.nii.gz"
	out_path=/import/monstrum/eons_xnat/redcap/imaging_variables/n1601_asl_automated_QA_4_9_15.csv
	#out_path=/import/monstrum/eons2_xnat/scripts/ASL/QA/automated_qa.csv
	mask_path=/import/monstrum/eons_xnat/progs/ASL/reg_check_n931_mask_brain.nii.gz
	email=hopsonr@bbl.med.upenn.edu
	overwrite=0
fi

#get list of scans from header of audit file
first_line=`cat $audit_file | sed -n 1p | tr "," " "`
length=`echo $first_line | wc -w`
last=`echo $length - 1 | bc`
header=`echo $first_line | cut -d " " -f 2-$last`

#this function checks for all niftis specified in the header file. Should be run in the beginning to check what needs processed, and at the end to check for errors
check_niftis () {
	process=0;errors=$scanid,$bblid;n=2;redcap=""
	for scan in $header
	do
		nifti_test=`ls $subdir/*$scan*/nifti/*.nii.gz 2> /dev/null`
		[ "X$nifti_test" == "X" ] && nifti_test=`ls $subdir/*$scan*/nifti/*.nii 2> /dev/null`		
		dicom_test=`ls $subdir/*$scan*/[Dd]icoms/*.dcm 2> /dev/null`
		has=`echo $i | cut -d "," -f $n`
		((n++))
		if [ "X$nifti_test" == "X" ] && [ $has == 1 ];then
			process=1
			errors=`echo $errors,"missing_"$scan"_nifti"`
			redcap=`echo "$redcap"0,`
			declare has_"$scan"=0
		elif [ "X$nifti_test" != "X" ] && [ $has == 1 ];then
			redcap=`echo "$redcap"1,`
			declare has_"$scan"=1
		elif [ $has == 0 ];then
			redcap=`echo "$redcap"0,`
			declare has_"$scan"=0
		fi

		[ "X$dicom_test" == "X" ] && [ $has == 1 ] && process=1 && errors=`echo $errors,"missing_"$scan"_example_dicom"`
	done
}

#get the list of subjects
[ $singlesub == 0 ] && slist=`cat $audit_file | sed -n 2,'$'p`
[ $singlesub == 1 ] && slist=`cat $audit_file | grep ^$single_id`

#set downloaddir
downloaddir=/import/monstrum/$protocol/subjects/

for i in $slist
#get scanid, shortened scanid (- 00), bblid, make id, and has_scantype variables
do
	scanid=`echo $i | cut -d "," -f 1`
	scanid_short=`echo $scanid | sed 's/^0*//'`
	bblid=`echo $i | cut -d "," -f 10 | sed 's/^0*//'`
	id=`echo $bblid"_"$scanid_short`
	subdir=$downloaddir/$id
	scans_present=`echo $i | cut -d "," -f 2-$last`
	echo "******************"$id"******************************"
	check_niftis

	###loop through list of scans, process if needed
	for scan in $header
	do
		$test_mode /import/speedy/scripts/bin/dicoms2nifti_v4.2.py -scanid $scanid -upload 1 -outdir ~/eons3_test/ -auto 1 -autotype $scan
	done
	check_niftis


	echo $errors
	echo $bblid,$scanid_short,$scans_present,$redcap

done



