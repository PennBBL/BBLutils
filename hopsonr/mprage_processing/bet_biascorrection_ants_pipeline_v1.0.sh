#testing_mode=echo

#useage
function Usage {
	cat <<USAGE
Usage:
  -a:  full path to Audit file, generated by an xnat_audit.py. Required.
  -p:  Protocol name as on monstrum. Required.
  -x:  Protocol name as in xnat. Required.
  -m:  Name of mprage scan as in audit header and file structure. Required.
  -e:  Email address for error reporting.
  -r:  Redcap protocol name for automatic uploading.
  -s:  Scanid
  -t:  Testing mode.

USAGE
	exit 1
}

###set defaults
overwrite=0
singlesubject=0
all_dicoms=""
redcap_name=""
email=""
day=`date +%m_%d_%y`
mprage_file=""

###check for args
[ $# -lt 1 ] && Usage

# reading command line arguments
while getopts ":a:p:s:he:tx:m:r:" OPT
	do
	case $OPT in
		h) #help
		Usage >&2
		exit 0
		;;
		a) #audit file
		audit_file=$OPTARG
		;;
		p) #protocol name as on monstrum
		protocol=$OPTARG
		;;
		x) #path to output
		xnat_name=$OPTARG
		;;
		e) #email address for error reporting
		email=$OPTARG
		;;
		r) #name of redcap project for automated uploading
		redcap_name=$OPTARG
		;;
		m) #name of mprage file as in header
		mprage_name=$OPTARG
		;;
		t) #testing mode
		testing=1
		;;
		s) #scanid
		singlesubject=1
		scanid=$OPTARG
		;;
		\?) # getopts issues an error message
		Usage >&2
		exit 1
		;;
	esac
done

#set variables automatically for testing purposes
if [ ! -z $testing ];then
	#audit_file=/import/monstrum/eons2_xnat/scripts/xnat_stats/n404_xnat_audit.csv
	audit_file=/import/monstrum/eons_xnat/redcap/imaging_variables/n1601_eons_xnat_audit_7_1_14.csv
	#protocol=eons2_xnat
	protocol=eons_xnat
	#out_path=/import/monstrum/eons2_xnat/scripts/ASL/QA/automated_qa.csv
	email=hopsonr@bbl.med.upenn.edu
	overwrite=0
fi

###set up error path
mkdir -p /import/monstrum/$protocol/logs
error_path=/import/monstrum/$protocol/logs/bet_biascorrection_error_log.txt
[ -e $error_path ] && rm -f $error_path
[ $singlesubject == 0 ] && rm -f /import/monstrum/$protocol/logs/bet_biascorrection_subject_error_log.csv

###set up output_audit_path
output_audit_path=/import/monstrum/$protocol/logs/bet_biascorrection_audit.csv

echo "Audit file is: "$audit_file
echo "Protocol is: "$protocol

###check arguments
errors=""
[ ! -e "$audit_file" ] && errors=`echo $errors "Missing audit file."`
[ ! -d "/import/monstrum/$protocol" ] && errors=`echo $errors "Missing study directory."`
[ -z $mprage_name ] && errors=`echo $errors "No mprage file specified."`

###check dependencies
[ ! -e "$ANTSPATH/antsBrainExtraction.sh" ] && errors=`echo $errors "Missing antsBrainExtraction.sh"`
[ ! -e "/import/speedy/scripts/bin/xnat_check_assessor_exists.py" ] && errors=`echo $errors "Missing xnat_check_assessor_exists.py"`
[ ! -e "/import/speedy/scripts/bin/xnat_upload_assessor.py" ] && errors=`echo $errors "Missing xnat_upload_assessor.py"`

###if any errors, exit
if [ ! -z "$errors" ];then 
	echo $errors 
	[ "$error_path" != "/error_log.txt" ] && echo $errors > $error_path 
	Usage
fi

###get names of scans from audit header, assign field numbers from header###
############################################################################
header=`cat $audit_file | sed -n 1p | tr "," " "`
scans=""
field_num=1
for field in $header
do
	[ "$field" != "subject" ] && [ "$field" != "bblid" ] && [ "$field" != "doscan" ] && scans=`echo $scans $field`
	declare $field=$field_num
	((field_num++))
done
scans=`echo $scans | sed s/'^ '//`

####define functions####
########################
check_existing () {
	echo "running check_existing."
	process=0
	process_correctedbrain=0
	process_corrected=0
	process_bet=0

	bias_bet_test=`ls $subdir/*$mprage_name*/biascorrection/*correctedbrain.nii.gz 2> /dev/null`
	bias_test=`ls $subdir/*$mprage_name*/biascorrection/*corrected.nii.gz 2> /dev/null`
	bet_test=`ls $subdir/*$mprage_name*/bet/*bet.nii.gz 2> /dev/null`
	#bias_bet_xnat=`/import/speedy/scripts/bin/xnat_check_assessor_exists.py -session $scanid -configfile ~/.xnat.cfg -assessor_name "$scanid"_mprage_SEQ"$seqnum"_correctedbrain`
	#bias_xnat=`/import/speedy/scripts/bin/xnat_check_assessor_exists.py -session $scanid -configfile ~/.xnat.cfg -assessor_name "$scanid"_mprage_SEQ"$seqnum"_corrected`
	#bet_xnat=`/import/speedy/scripts/bin/xnat_check_assessor_exists.py -session $scanid -configfile ~/.xnat.cfg -assessor_name "$scanid"_mprage_SEQ"$seqnum"_bet`
	if [ "X$bias_bet_test" == "X" ];then
		subject_errors=$subject_errors,"missing_correctedbrain"
		process=1
		process_correctedbrain=1
	fi
	if [ "X$bias_test" == "X" ];then
		subject_errors=$subject_errors,"missing_corrected"
		process=1
		process_corrected=1
	fi
	if [ "X$bet_test" == "X" ];then
		subject_errors=$subject_errors,"missing_bet"
		process_bet=1
		process=1
	fi
	mprage_nifti=`ls $subdir/*$mprage_name/nifti/*nii 2> /dev/null`
	if [ "X$mprage_nifti" == "X" ];then
		subject_errors=$subject_errors,"missing_mprage_nifti"
		process=0
	fi
}

#####make csv for nifti audit#####
##################################
audit_header=bblid,scanid,bet,biascorrection,correctedbrain,error
[ $singlesubject == 0 ] && echo $audit_header > $output_audit_path

####get subject list####
########################
[ $singlesubject == 0 ] && slist=`cat $audit_file | sed -n 2,'$'p`
[ $singlesubject == 1 ] && slist=`cat $audit_file | grep $scanid`

#####loop over subjects#####
############################
for i in $slist
do
echo $i
mprage_field_number=${!mprage_name}
scanid=`echo $i | cut -d "," -f $subject`
echo $scanid
scanid_short=`echo $scanid | sed 's/^0*//'`
subjectbblid=`echo $i | cut -d "," -f $bblid | sed 's/^0*//'`
has_mprage=`echo $i | cut -d "," -f $mprage_field_number`
id=`echo $subjectbblid"_"$scanid_short`
downloaddir=/import/monstrum/$protocol/subjects/
subdir=$downloaddir/$id
seq_dir=`ls -d $subdir/*$mprage_name 2> /dev/null`

check_existing

if [ $has_mprage == 1 ] && [ $process == 1 ];then
#sample call
	if [ $process_bet == 1 ];then
		mkdir -p $seq_dir/bet
		currdir=`pwd`
		cd $downloaddir
		exists_in_xnat=`/import/speedy/scripts/bin/xnat_check_assessor_exists.py -session $scanid -assessor_name $scanid"_"$mprage_name"_ANTS_BET" -configfile ~/.xnat.cfg`
		[ "$exists_in_xnat" == "FALSE" ] && antsBrainExtraction.sh -d 3 -a $mprage_nifti -e /import/monstrum/Applications/fsl5/data/standard/MNI152_T1_1mm.nii.gz -m /import/monstrum/Applications/fsl5/data/standard/MNI152_T1_1mm_brain_mask.nii.gz -o $seq_dir/bet/
		cd $currdir
	fi

fi

done
