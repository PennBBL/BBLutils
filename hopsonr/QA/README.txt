ASL QA script is designed to be integrated into a larger pipeline. It can routinely check a number of QA measures of ASL data, and suggest which data sets require visual inspection. As with the majority of my scripts, it is dependent on an audit file having been generated from xnat using xnat_audit_v1.1.py. It consists of 5 scripts:
ASL_QA_v1.sh
check_coverage_QA_v3.sh
check_registration_QA_v2.sh
ASL_QA_v1.1.R
visual_qa_loop.sh

###ASL_QA###
############
Main script. This calls the others and is primarily used to create a csv of all the data needed for QA. 

Usage:
  -a:  Audit file, generated by an xnat_audit.py. Required.
  -s:  Sequence name, as column is named in audit file. Required.
  -f:  File path, as regular expression. Required.
  -p:  Protocol name as on monstrum. Required.
  -o:  Output path. Required.
  -m:  Mask for checking coverage. Required.
  -w:  overWrite previously completed QA. 0 = no, 1 = yes. Defalut = 0.
  -e:  Email address for error reporting.
  -r:  Redcap protocol name for automatic uploading.
  -t:  Testing mode.

Unlike functional QA, tsnr and motion variables are obtained from prestats or calculated directly, not downloaded from qa epi 10.  

Maxrel and meanrel are obtained by parsing the .rms files generated by prestats. tSNR is calculated by making a mean image of the raw ASL data and a standard deviation image using fslmaths, then dividing the mean by the standard deviation. The mean of the values inside the subject mask is used as the subject's tSNR.

Coverage and registration are checked using check_coverage_QA_v3.sh and check_registration_QA_v2.sh. They will be described. 

Mask of any voxels clipped at any point in the timeseries is generated by looking for voxels with a value of 4095. The number of voxels affected by clipping is counted.

Mean cbf is calculated to look for outliers.

Netagive voxels are counted as a way of looking for artifacts and scanner issues.

All this data is then output as a csv, and can be fed to ASL_QA_v1.1.R to flag outliers and calculate exclusions.


###check_coverage_QA_v3.sh###
#############################
Usage:
  -f:  Full path to processed data. Required.
  -m:  Group level mask to check coverage (MNI brain can be substituted). Required.

This script takes processed data and a mask (either group level or MNI brain), and checks 2 things. 1. How many voxels inside the mask are 0? 2. How many voxels outside of the mask are > 1/3 the max intensity of the image? This second check is done to ensure registration hasn't resulted in the brain being shifted outside the target area.

###check_registration_QA_v2.sh###
#################################
Usage:
  -f:  Full path to processed data. Required.
  -m:  Group level mask to check coverage (MNI brain can be substituted). Required.

Runs fslcc to compare registered image to template. This is a rough judge of registration and data quality in scans that are not anatomical, and should not be relied upon beyond suggesting images for visual review.

###ASL_QA_v1.1.R###
###################
This script requires 3 arguements, with an optional 4th. A path to the QA csv generated using the scripts above. A path to the desired output. A path to the most recently completed visual QA, both for reading (to check for visual excludes) and writing out newly flagged data sets. Lastly, a redcap project name can be provided. This will result in the script attempting to upload the QA to redcap. This will work only if the person running the script has the necessary redcap API access, and if the redcap data dictionary has been properly configured.

Exclusion criteria is commented w/in the script, and based on exclusions from EONS.

###visual_qa_loop.sh###
#######################
Usage:
  -v:  Visual qa file generated by QA.R. Required.
  -p:  Protocol name as on monsturm (i.e. "eons_xnat"). Required.
  -f:  Path from subject dir to standard space image. Required.
  -n:  Start on subject number x. Default = 1
  -u:  Show only uninspected participants. Default = 0
  -e:  Review only excludes. Default = 0

This program is intended to streamline the visual QA process. As input, it takes the visual QA output from the R script. In the default mode it opens each flagged scan, then asks if it should be excluded. It can also be run such that it only opens uninspected scans. This allows it to be run only on new additions, if QA is being done as data is collected. It will edit the visual qa file to include include/exclude flags, which in turn will be used to calculate exclusions the next time the QA R script is run.

###functional QA###
###################

Similar to above, with certain additions.

Calling syntax: /import/speedy/scripts/hopsonr/QA/functional/functional_QA_v1.2.sh -a /import/monstrum/eons2_xnat/QA/n404_eons_xnat_audit.csv -s bbl1_restbold1_124 -f "*restbold*/prestats/mean_func2standard.nii.gz" -p eons2_xnat -x EONS_810336 -o /import/monstrum/eons2_xnat/QA/restbold/restbold_qa_test.csv -m /import/monstrum/Applications/fsl5/data/standard/MNI152_T1_2mm_brain.nii.gz -e "kseelaus@mail.med.upenn.edu" -w 1

Usage:
  -a:  full path to Audit file, generated by an xnat_audit.py. Required.
  -s:  Sequence name, as column is named in audit file. Required.
  -f:  File path within subject dir, as regular expression. Required.
  -p:  Protocol name as on monstrum. Required.
  -x:  Protocol name as in xnat. Required.
  -o:  Output path to csv. Required.
  -m:  Mask for checking coverage. Required.
  -b:  Behavioral measure for QA,minimum value. Can be used multiple times. Eg. "-b allcorrect,54 -b targetcorrect,30"
  -c:  Path from subject level directory to score file. Required if using behavioral measures. Eg. "-c \"scores/iDemo2.10/*_test_output_scores.csv\""
  -w:  overWrite previously completed QA. 0 = no, 1 = yes. Defalut = 0.
  -e:  Email address for error reporting.
  -r:  Redcap protocol name for automatic uploading.
  -t:  Testing mode.
  -v:  Values to use for meanrelrms, maxrelrms, tSNR, spikerate, and nclips cut offs, comma separated. Default = 0.5,6,30,,
























