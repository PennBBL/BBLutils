#useage
function Usage {
	cat <<USAGE
Usage:
  -a:  Audit file, generated by an xnat_audit.py. Required.
  -s:  Sequence name, as column is named in audit file. Required.
  -f:  File path, as regular expression. Required.
  -p:  Protocol name as on monstrum. Required.
  -o:  Output path. Required.
  -m:  Mask for checking coverage. Required.
  -w:  overWrite previously completed QA. 0 = no, 1 = yes. Defalut = 0.
  -e:  Email address for error reporting.
  -r:  Redcap protocol name for automatic uploading.
  -t:  Testing mode.

USAGE
	exit 1
}

###set defaults
overwrite=0

###check for args
[ $# -lt 1 ] && Usage

# reading command line arguments
while getopts ":a:p:f:s:ho:m:e:wt" OPT
	do
	case $OPT in
		h) #help
		Usage >&2
		exit 0
		;;
		a) #audit file
		audit_file=$OPTARG
		;;
		s) #column name
		sequence_name=$OPTARG
		;;
		f) #path to file
		file_path=$OPTARG
		;;
		p) #protocol name as on monstrum
		protocol=$OPTARG
		;;
		o) #path to output
		out_path=$OPTARG
		;;
		m) #path to mask for coverage check
		mask_path=$OPTARG
		;;
		w) #should old data be overwritten?
		overwrite=$OPTARG
		;;
		e) #email address for error reporting
		email=$OPTARG
		;;
		r) #name of redcap project for automated uploading
		redcap_name=$OPTARG
		;;
		t) #testing mode
		testing=1
		;;
		\?) # getopts issues an error message
		Usage >&2
		exit 1
		;;
	esac
done

#set variables automatically for testing purposes
if [ ! -z $testing ];then
	#audit_file=/import/monstrum/eons2_xnat/scripts/xnat_stats/n404_xnat_audit.csv
	audit_file=/import/monstrum/eons_xnat/redcap/imaging_variables/n1601_eons_xnat_audit_7_1_14.csv
	sequence_name=perf
	#protocol=eons2_xnat
	protocol=eons_xnat
	file_path="*_ep2d_se_pcasl_PHC_1200ms/quant_[dn][io][c_][od][_i][bc][eo]*/reg_std_ants/cbf_map_*_2mm.nii.gz"
	out_path=/import/monstrum/eons_xnat/redcap/imaging_variables/n1601_asl_automated_QA_4_9_15.csv
	#out_path=/import/monstrum/eons2_xnat/scripts/ASL/QA/automated_qa.csv
	mask_path=/import/monstrum/eons_xnat/progs/ASL/reg_check_n931_mask_brain.nii.gz
	email=hopsonr@bbl.med.upenn.edu
	overwrite=0
fi

###set up error path
error_path=`dirname $out_path`/error_log.txt
[ -e $error_path ] && rm -f $error_path

echo "Audit file is: "$audit_file
echo "Sequence name is: "$sequence_name
echo "Output file is: "$out_path

###check arguments
errors=""
[ ! -e "$audit_file" ] && errors=`echo $errors "Missing audit file."`
[ ! -d "/import/monstrum/$protocol" ] && errors=`echo $errors "Missing study directory."`
[ ! -e "$mask_path" ] && errors=`echo $errors "Missing mask for coverage check."`
[ -z "$sequence_name" ] && errors=`echo $errors "No sequence name specified."`

###check dependencies
[ ! -d "$FSLDIR" ] && errors=`echo $errors "Missing FSLDIR."`
[ ! -e "$FSLDIR/data/standard/tissuepriors/avg152T1_gray_bin.nii.gz" ] && errors=`echo $errors "Missing grey matter mask."`
[ ! -e "/import/speedy/scripts/hopsonr/QA/check_coverage_QA_v3.sh" ] && errors=`echo $errors "Missing coverage script."`
[ ! -e "/import/speedy/scripts/hopsonr/QA/check_registration_QA_v2.sh" ] && errors=`echo $errors "Missing registration script."`

###find fields necessary from audit file
if [ -e "$audit_file" ] && [ ! -z $sequence_name ]; then
	field=1
	for column_name in `head -1 $audit_file | tr ',' ' '`
	do
		[ $column_name == $sequence_name ] && sequence_field=$field
		[ $column_name == 'subject' ] && scanid_field=$field
		[ $column_name == 'bblid' ] && bblid_field=$field	
		field=$((field+1))
	done
	###check that needed fields found
	[ -z $sequence_field ] || [ -z $bblid_field ] || [ -z $scanid_field ] && errors=`echo $errors "Sequence, bblid, or scanid not found in audit file"`
fi

###if any errors, exit
if [ ! -z "$errors" ];then 
	echo $errors 
	[ "$error_path" != "/error_log.txt" ] && echo $errors > $error_path 
	exit 2
fi

###initiate output file
[ $overwrite == 1 ] && echo bblid,scanid,no_data_collected,missing_data,meanrel,maxrel,tsnr,zeros_in_mask,voxels_out_of_mask,fslcc,nclips,mean_intensity,negative_voxels > $out_path

###main loop - do for each subject in the audit
for line in `cat $audit_file | sed -n 2,'$'p`
#for line in `cat $audit_file | grep 6902,` #for testing
do
	###set variables from audit file
	scanid=`echo $line | cut -d "," -f $scanid_field | sed s/^0*//`
	bblid=`echo $line | cut -d "," -f $bblid_field | sed s/^0*//`
	has_sequence=`echo $line | cut -d "," -f $sequence_field`

	###set up subject errors
	subject_errors=$bblid,$scanid

	###if not overwriting, skip if already in QA output, iff it previously ran error free
	if [ $overwrite == 0 ];then
		previous_QA=`grep -q ",$scanid," $out_path`
		previous_error=`echo $previous_QA | cut -d "," -f 4`
		if [ "X$previous_error" == "X1" ];then
			echo $scanid found in $out_path with error. Will rerun.
		else
			echo $scanid found in $out_path
			continue
		fi
	fi

	if [ $has_sequence == 0 ]
	then
		echo $bblid,$scanid,1,,,,,,,,,, >> $out_path
		continue
	fi

	###check that data exists
	data=`ls /import/monstrum/$protocol/subjects/$bblid"_"$scanid/$file_path 2>/dev/null`
	if [ "X$data" == "X" ];then
		echo $bblid,$scanid,0,1,,,,,,,,, >> $out_path
		continue
	elif [ `echo $data | wc -w` -gt 1 ];then
		echo "Error - more than one sequence file found for "$bblid
		subject_errors=`echo $subject_errors,"more than one sequence file found"`
		echo $subject_errors >> $error_path
		continue
	else
		found_data=1
		data_dir=`dirname $data`
	fi

	###check motion variables
	mcdir=`ls -d $data_dir/../../prestats*/mc 2>/dev/null`
	if [ ! `echo $mcdir | wc -w` == 1 ];then
		echo "Error - wrong number of mc directories files found for "$bblid
		subject_errors=`echo $subject_errors,"wrong number of mc directories found"`
		echo $subject_errors >> $error_path
		continue
	fi
	maxrel=`sort -nr $mcdir/prefiltered_func_data_mcf_rel.rms | head -1`
	meanrel=`cat $mcdir/prefiltered_func_data_mcf_rel_mean.rms`

	###get tsnr
	all_niftis=`ls $data_dir/../../nifti/00$scanid*.nii.gz` #can't just use grep here, because of "reg_std_ants". To avoid other complications, only checking basenames
	nifti_base=$(for i in $all_niftis;do basename $i;done | grep -v -e 'tsnr' -e 'mean' -e 'std' -e 'clip')
	[ `echo $nifti_base | wc -w` -gt 1 ] && echo "Error - more than one nifti found for "$bblid && subject_errors=`echo $subject_errors,"more than one nifti found"` && echo $subject_errors >> $error_path && continue
	nifti=`ls $data_dir/../../nifti/$nifti_base`
	nifti_name=`echo $nifti | cut -d "." -f 1-5` #this is kind of janky. "../.." in the path makes it weird.

	###make tsnr image
	tsnr_test=`ls $nifti_name"_tsnr"* 2> /dev/null`
	if [ "X$tsnr_test" == "X" ];then
		$FSLDIR/bin/fslmaths $nifti -Tmean $nifti_name"_mean"
		$FSLDIR/bin/fslmaths $nifti -Tstd $nifti_name"_std"
		$FSLDIR/bin/fslmaths $nifti_name"_mean" -div $nifti_name"_std" $nifti_name"_tsnr" -odt float #calculate tsnr
		$FSLDIR/bin/imrm $nifti_name"_mean" $nifti_name"_std" #remove temp files
	fi

	###make subject mask for tsnr calc
	mask_test=`ls $data_dir/../../nifti/subject_mask.nii.gz 2>/dev/null`
	if [ "X$mask_test" == "X" ];then
		mprage=`ls /import/monstrum/$protocol/subjects/$bblid"_"$scanid/*mprage/bet/*BET*mask.nii.gz 2> /dev/null`
		mprage_dir=`dirname $mprage`
		$FSLDIR/bin/flirt -in $mprage -ref $data_dir/../../prestats*/example_func.nii.gz -applyxfm -init $data_dir/../../prestats*/reg/highres2example_func.mat -out $data_dir/../../nifti/subject_mask
	fi
	if [ ! -e $nifti_name"_tsnr"* ] || [ ! -e $data_dir/../../nifti/subject_mask* ];then
		echo "Error - could not calculate tsnr for "$bblid
		subject_errors=`echo $subject_errors,could not calculate tsnr`
		echo $subject_errors >> $error_path
		continue
	fi
	meantsnr=`$FSLDIR/bin/fslstats $nifti_name"_tsnr" -k $data_dir/../../nifti/subject_mask -M | sed s/" "//`

	###check coverage
	coverage=`/import/speedy/scripts/hopsonr/QA/check_coverage_QA_v3.sh -f $data -m $mask_path`

	###check registration with fslcc
	registration=`/import/speedy/scripts/hopsonr/QA/check_registration_QA_v2.sh -f $data`

	###make mask of clipped voxels and get count
	[ ! -e $nifti_name"_clipmask"* ] && fslmaths $nifti -Tmax -thr 4095 -bin $nifti_name"_clipmask" -odt char
	[ ! -e $nifti_name"_clipmask"* ] && echo "Error - could not make clipmask for $bblid" && subject_errors=`echo $subject_errors,"could not create clipmask"` && echo $subject_errors >> $error_path && continue
	nclips=`fslstats $nifti_name"_clipmask" -V | cut -d " " -f 1`

	###mean cbf for flagging outliers
	mean_cbf=`fslstats $data -k $FSLDIR/data/standard/tissuepriors/avg152T1_gray_bin.nii.gz -M | sed s/" "//`

	###negative voxels
	negative_voxels=`fslstats $data -k $FSLDIR/data/standard/tissuepriors/avg152T1_gray_bin.nii.gz -u 0 -V | cut -d " " -f 1 | sed s/" "//`

###remember, $coverage contains TWO values
echo $bblid,$scanid,0,0,$meanrel,$maxrel,$meantsnr,$coverage,$registration,$nclips,$mean_cbf,$negative_voxels
echo $bblid,$scanid,0,0,$meanrel,$maxrel,$meantsnr,$coverage,$registration,$nclips,$mean_cbf,$negative_voxels >> $out_path

done

error_log_test=`ls $error_path 2> /dev/null`
if [ "X$error_log_test" != "X" ] && [ ! -z $email ];then
	echo ""
	echo "Emailing error log"
	mail -s "ASL QA for $protocol" $email < $error_path
fi

if [ ! -z $redcap_name ];then
	/import/monstrum/Applications/R3.0.2/bin/R --file=/import/speedy/scripts/hopsonr/R_utilities/upload_to_redcap.R --slave --args "$recap_name" "$out_path"
fi
